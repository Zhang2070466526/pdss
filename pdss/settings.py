"""
Django settings for pdss project.

Generated by 'django-admin startproject' using Django 4.2.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""
import os
from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-b8^6i2@ljh*zc1w_%4!z(w05(gkw5lwwz7*0w)4hc37!q2%mus'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ['*']

# Application definition





INSTALLED_APPS = [
    'corsheaders',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'auther.apps.AutherConfig',
    'django_elasticsearch_dsl',
    'haystack',
    'salarySurvey.apps.SalarysurveyConfig',
    'memorabilia.apps.MemorabiliaConfig',   #公司大事记app
    'externalHonors.apps.ExternalhonorsConfig',
    'general.apps.GeneralConfig',
    'internalEvaluation.apps.InternalevaluationConfig',#内部评优
    'recruit.apps.RecruitConfig',
    'employeeActivities.apps.EmployeeactivitiesConfig',
    'employeeInspect.apps.EmployeeinspectConfig',#員工稽核
    'rewardsPunishments.apps.RewardspunishmentsConfig',#奖惩
    'employeeCare.apps.EmployeecareConfig',#員工關懷
    'setup.apps.SetupConfig',#设置
    'volumeContracts.apps.VolumecontractsConfig',  # 批量合同
    'competeRestrictions.apps.CompeterestrictionsConfig',  # 竞业限制
    'hikCanteen.apps.HikcanteenConfig',
    'rayongAttendance.apps.RayongattendanceConfig',  #泰国罗勇考勤
    'expatriateRecord.apps.ExpatriaterecordConfig',#外派台账
    'debug_toolbar',
    'indexShow.apps.IndexshowConfig',
    'employee.apps.EmployeeConfig',
    'offlineTraining.apps.OfflinetrainingConfig',#线下培训
    'IeProposal.apps.IeproposalConfig' ,#IE提案
    # 'debug_toolbar.apps.DebugToolbarConfig'
    'socialSecurity.apps.socialsecurityConfig',#员工社保平台
    'performance.apps.PerformanceConfig',#绩效
    'wx.apps.WxConfig',
    'translate.apps.TranslateConfig',
    'shoeCabinet.apps.ShoecabinetConfig',  # 鞋柜模块
    'testApp.apps.TestappConfig',
    'employeePersonnel.apps.EmployeePersonnelConfig',#员工人事数据
    # 'staffFollowing.apps.StafffollowingConfig',#人员跟踪模块
    'talentDevelop.apps.TalentdevelopConfig',#人才发展
    'channels'

]

MIDDLEWARE = [
    'debug_toolbar.middleware.DebugToolbarMiddleware', # 如果没有处理编码和响应的中间件，这个中间件就应该放在最前面
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.common.CommonMiddleware',
    # 'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'general.general.generalClass.LogMiddleware',  #日志存储中间件
    'general.general.generalClass.TokenMiddleware',  #token中间件

]
CORS_ORIGIN_ALLOW_ALL = True
CORS_ALLOW_CREDENTIALS = True
CORS_ALLOW_METHODS = (
    'DELETE',
    'GET',
    'OPTIONS',
    'PATCH',
    'POST',
    'PUT',
    'VIEW',
)

CORS_ALLOW_HEADERS = (
    'XMLHttpRequest',
    'X_FILENAME',
    'accept-encoding',
    'authorization',
    'content-type',
    'dnt',
    'origin',
    'user-agent',
    'x-csrftoken',
    'x-requested-with',
    'Pragma',
    'X-Token',
    'token'
)
ROOT_URLCONF = 'pdss.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'templates']
        ,
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'pdss.wsgi.application'

# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

# DATABASES = {
#     'default': {
#         'ENGINE': 'django.db.backends.mysql',  # 数据库引擎
#         'NAME': 'pdss',  # 数据库名称
#         'HOST': '172.16.6.139',  # 数据库地址，本机 ip 地址 127.0.0.1
#         'PORT': 3306,  # 端口
#         'USER': 'pdss',  # 数据库用户名
#         'PASSWORD': 'RaGjeDnMYiYMX6W7',  # 数据库密码
#         'isolation_level': 'read committed',
#         'OPTIONS': {
#             "init_command": "SET foreign_key_checks = 0;",
#         }
#     }
# }

# DATABASES = {
#     'default': {
#         'ENGINE': 'django.db.backends.mysql',  # 数据库引擎
#         'NAME': 'pdss',  # 数据库名称
#         'HOST': '172.16.6.121',  # 数据库地址，本机 ip 地址 127.0.0.1
#         'PORT': 3306,  # 端口
#         'USER': 'pdss',  # 数据库用户名
#         'PASSWORD': 'z2P4y6FBbTJ5YLLA',  # 数据库密码
#         'isolation_level': 'read committed',
#         'OPTIONS': {
#             "init_command": "SET foreign_key_checks = 0;",
#         }
#     }
# }

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',  # 数据库引擎
        'NAME': 'pdss3',  # 数据库名称
        'HOST': '127.0.0.1',  # 数据库地址，本机 ip 地址 127.0.0.1
        'PORT': 3306,  # 端口
        'USER': 'root',  # 数据库用户名
        'PASSWORD': '8023',  # 数据库密码
        'isolation_level': 'read committed',
        'OPTIONS': {
            "init_command": "SET foreign_key_checks = 0;",
        }
    }
}

# pdss/settings.py
# hunter/settings.py

from elasticsearch_dsl import connections

connections.configure(
    default={"hosts": "localhost:9200"},
)




ELASTICSEARCH_DSL = {
   'default': {
       'hosts': 'http://localhost:9200'
   },
}

# Haystack
HAYSTACK_CONNECTIONS = {
    'default': {
        'ENGINE': 'haystack.backends.elasticsearch_backend.ElasticsearchSearchEngine',
        # elasticsearch运行的服务器ip地址，端口号默认为9200
        'URL': 'http://localhost:9200/', # 配置 IP:port
        # elasticsearch建立的索引库的名称，一般使用项目名作为索引库
        'INDEX_NAME': 'employeePesonnel',
    },
}
# 设置在Django运行时，如果有数据产生变化(添加、修改、删除)，
# haystack会自动让Elasticsearch实时生成新数据的索引
HAYSTACK_SIGNAL_PROCESSOR = 'haystack.signals.RealtimeSignalProcessor'




# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]
CACHES = {
    "default": {
        "BACKEND": "django_redis.cache.RedisCache",
        "LOCATION": "redis://172.16.6.89:6379",
        "OPTIONS": {
            "CLIENT_CLASS": "django_redis.client.DefaultClient",
            "PASSWORD": "372169zw..",
            # "COMPRESSOR": "django_redis.compressors.zlib.ZlibCompressor",
            # "IGNORE_EXCEPTIONS": True,
        }
    }
}


# CACHES = {
#     "default": {
#         "BACKEND": "django_redis.cache.RedisCache",
#         "LOCATION": "redis://172.16.6.121:6379/15",
#         "OPTIONS": {
#             "CLIENT_CLASS": "django_redis.client.DefaultClient",
#             "PASSWORD": "372169zw..",
#             "CONNECTION_POOL_KWARGS": {"decode_responses": True, "max_connections": 100},
#         }
#     }
# }

# 'redis://:372169zw..@172.16.6.89:6379/2'
# Celery 配置
# CELERY_BROKER_URL = 'redis://:8023@localhost:6379/2'
# CELERY_RESULT_BACKEND = 'redis://:8023@localhost:6379/2'
# CELERY_BROKER_URL = 'redis://:372169zw..@172.16.6.89:6379/2'
# CELERY_RESULT_BACKEND = 'redis://:372169zw..@172.16.6.89:6379/2'
# CELERY_ACCEPT_CONTENT = ['json']
# CELERY_TASK_SERIALIZER = 'json'
# CELERY_RESULT_SERIALIZER = 'json'

# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = 'zh-hans'

TIME_ZONE = 'Asia/Shanghai'

USE_TZ = False

USE_I18N = True

USE_L10N = False

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

STATIC_URL = 'static/'
STATICFILES_DIRS = (
    os.path.join(BASE_DIR, 'static'),
)
# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

# DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'
# DEBUG_TOOLBAR_CONFIG = {
#     'JQUERY_URL': 'https://cdn.bootcss.com/jquery/3.4.1/jquery.min.js',
#     'SHOW_COLLAPSED': True,
#     'SHOW_TOOLBAR_CALLBACK': lambda x: True,
# }
# INTERNAL_IPS=['10.60.13.82']
# DEBUG_TOOLBAR_PATCH_SETTINGS = False
# DEBUG_TOOLBAR_PANELS = [
#     'debug_toolbar.panels.versions.VersionsPanel',
#     'debug_toolbar.panels.timer.TimerPanel',
#     'debug_toolbar.panels.settings.SettingsPanel',
#     'debug_toolbar.panels.headers.HeadersPanel',
#     'debug_toolbar.panels.request.RequestPanel',
#     'debug_toolbar.panels.sql.SQLPanel',
#     'debug_toolbar.panels.staticfiles.StaticFilesPanel',
#     'debug_toolbar.panels.templates.TemplatesPanel',
#     'debug_toolbar.panels.cache.CachePanel',
#     'debug_toolbar.panels.signals.SignalsPanel',
#     'debug_toolbar.panels.logging.LoggingPanel',
#     'debug_toolbar.panels.redirects.RedirectsPanel',
# ]



# 'redis://:8023@localhost:6379/2'
CELERY_BROKER_URL = 'redis://localhost:6379/2'  # 使用Redis作为消息代理       消息中间件
CELERY_RESULT_BACKEND = 'redis://localhost:6379/2'      # 配置 Celery 任务结果存储位置
# CELERY_BROKER_URL = 'redis://localhost:6379/2'   #密码  使用Redis作为消息代理：
# CELERY_RESULT_BACKEND = 'redis://localhost:6379/2'      # 配置 Celery 任务结果存储位置
# from celery import Celery
#
# app = Celery('mycelery', broker='redis://localhost:6379/2')
#
#
# # 使用Django配置
# app.config_from_object('mycelery.config') #指定配置文件的位置,配置Celery，使用Redis作为消息队列
# app.conf.broker_connection_retry = True
# # 自动发现异步任务
# app.autodiscover_tasks('mycelery.migrate')#自动从settings的配置installed_apps的应用目录下加载task.py
# 指定异步任务的命名空间
# CELERY_APP_NAME = 'employeepersonnel'

# # 配置Celery Flower监控工具，设置访问控制和认证：
# CELERY_FLOWER_USER = 'your_username'
# CELERY_FLOWER_PASSWORD = 'your_password'
# # 配置任务的默认队列名
# CELERY_DEFAULT_QUEUE = 'default'
# # 配置时区，通常使用与Django一致的时区
# CELERY_TIMEZONE = 'Asia/Shanghai'
# # 配置导入任务模块的位置，通常是Django应用程序的tasks.py文件
# CELERY_IMPORTS = ('employeepersonnel.tasks',)
# # 配置并发工作进程数
# CELERY_WORKER_CONCURRENCY = 4
# CELERY_RESULT_SERIALIZER='json'             #结果序列化方案
# CELERY_ACCEPT_CONTENT = ['json']
# CELERY_TASK_SERIALIZER = 'json'